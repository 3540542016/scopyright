package lltw.scopyright.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

/**
 * @author Sakura
 */
@SuppressWarnings("unchecked")
public class CopyrightQuery extends Contract {
    public static final String[] BINARY_ARRAY = {"","6000830152610f2481610e07565b9050919050565b60006020820190508181036000830152610f4481610e3e565b9050919050565b60006020820190508181036000830152610f6481610e75565b9050919050565b6000602082019050610f806000830184610eac565b92915050565b600061012082019050610f9c600083018c610eac565b610fa9602083018b610d19565b8181036040830152610fbb818a610d64565b90508181036060830152610fcf8189610d64565b90508181036080830152610fe38188610d64565b9050610ff260a0830187610d28565b610fff60c0830186610eac565b61100c60e0830185610eac565b61101a610100830184610d55565b9a9950505050505050505050565b600060e08201905061103d600083018a610eac565b818103602083015261104f8189610d9a565b905061105e6040830188610d37565b81810360608301526110708187610d9a565b905061107f6080830186610d46565b61108c60a0830185610eac565b61109960c0830184610eac565b98975050505050505050565b6000604051905081810181811067ffffffffffffffff821117156110c857600080fd5b8060405250919050565b600067ffffffffffffffff8211156110e957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561111557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060028210151561118457fe5b819050919050565b600060038210151561119a57fe5b819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60006002821015156111e957600080fd5b819050919050565b600060038210151561120257600080fd5b819050919050565b6000819050919050565b600061121f82611176565b9050919050565b60006112318261118c565b9050919050565b82818337600083830152505050565b60005b8381101561126557808201518184015260208101905061124a565b83811115611274576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820970f152f7fe39018fbc9443f418a4f84f0eaab2cbb2996226dc91bb0147f49ce6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","6000830152610f2481610e07565b9050919050565b60006020820190508181036000830152610f4481610e3e565b9050919050565b60006020820190508181036000830152610f6481610e75565b9050919050565b6000602082019050610f806000830184610eac565b92915050565b600061012082019050610f9c600083018c610eac565b610fa9602083018b610d19565b8181036040830152610fbb818a610d64565b90508181036060830152610fcf8189610d64565b90508181036080830152610fe38188610d64565b9050610ff260a0830187610d28565b610fff60c0830186610eac565b61100c60e0830185610eac565b61101a610100830184610d55565b9a9950505050505050505050565b600060e08201905061103d600083018a610eac565b818103602083015261104f8189610d9a565b905061105e6040830188610d37565b81810360608301526110708187610d9a565b905061107f6080830186610d46565b61108c60a0830185610eac565b61109960c0830184610eac565b98975050505050505050565b6000604051905081810181811067ffffffffffffffff821117156110c857600080fd5b8060405250919050565b600067ffffffffffffffff8211156110e957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561111557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060028210151561118457fe5b819050919050565b600060038210151561119a57fe5b819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60006002821015156111e957600080fd5b819050919050565b600060038210151561120257600080fd5b819050919050565b6000819050919050565b600061121f82611176565b9050919050565b60006112318261118c565b9050919050565b82818337600083830152505050565b60005b8381101561126557808201518184015260208101905061124a565b83811115611274576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582062992398addaf7cd4ca6e5069d95585fd64fc92d4d70bd976338194a3b33ff2f6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_password\",\"type\":\"string\"},{\"name\":\"_email\",\"type\":\"string\"},{\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"passwordHash\",\"type\":\"bytes32\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"role\",\"type\":\"uint8\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"workId\",\"type\":\"uint256\"}],\"name\":\"queryCopyright\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"copyrightNumber\",\"type\":\"string\"},{\"name\":\"copyrightApplied\",\"type\":\"bool\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_copyrightRegistryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"UserRegistered\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_USERS = "users";

    public static final String FUNC_QUERYCOPYRIGHT = "queryCopyright";

    public static final Event USERREGISTERED_EVENT = new Event("UserRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
    ;

    protected CopyrightQuery(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt registerUser(String _username, String _password, String _email, BigInteger _role) {
        final Function function = new Function(
                FUNC_REGISTERUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_password),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_email),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_role)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerUser(String _username, String _password, String _email, BigInteger _role, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_password),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_email),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_role)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterUser(String _username, String _password, String _email, BigInteger _role) {
        final Function function = new Function(
                FUNC_REGISTERUSER,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_username),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_password),
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_email),
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(_role)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, BigInteger> getRegisterUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple7<BigInteger, String, byte[], String, BigInteger, BigInteger, BigInteger> users(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, String, byte[], String, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (byte[]) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue());
    }

    public Tuple9<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger> queryCopyright(BigInteger workId) throws ContractException {
        final Function function = new Function(FUNC_QUERYCOPYRIGHT,
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(workId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (Boolean) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue());
    }

    public List<UserRegisteredEventResponse> getUserRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERREGISTERED_EVENT, transactionReceipt);
        ArrayList<UserRegisteredEventResponse> responses = new ArrayList<UserRegisteredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRegisteredEventResponse typedResponse = new UserRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.username = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.role = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUserRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUserRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(USERREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static CopyrightQuery load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CopyrightQuery(contractAddress, client, credential);
    }

    public static CopyrightQuery deploy(Client client, CryptoKeyPair credential, String _copyrightRegistryAddress) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_copyrightRegistryAddress)));
        return deploy(CopyrightQuery.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class UserRegisteredEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String username;

        public BigInteger role;
    }
}
