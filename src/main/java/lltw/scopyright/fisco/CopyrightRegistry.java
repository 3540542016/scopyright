package lltw.scopyright.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple9;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

/**
 * @author Sakura
 */
@SuppressWarnings("unchecked")
public class CopyrightRegistry extends Contract {
    public static final String[] BINARY_ARRAY = {"","73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016060815260200160608152602001600015158152602001600081526020016000815260200160006002811115610f6a57fe5b81525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fb157805160ff1916838001178555610fdf565b82800160010185558215610fdf579182015b82811115610fde578251825591602001919060010190610fc3565b5b509050610fec9190610ff0565b5090565b61101291905b8082111561100e576000816000905550600101610ff6565b5090565b90565b60006110218235611638565b905092915050565b600082601f830112151561103c57600080fd5b813561104f61104a826115aa565b61157d565b9150808252602083016020830185838301111561106b57600080fd5b611076838284611660565b50505092915050565b600061108b8235611644565b905092915050565b600080604083850312156110a657600080fd5b600083013567ffffffffffffffff8111156110c057600080fd5b6110cc85828601611029565b925050602083013567ffffffffffffffff8111156110e957600080fd5b6110f585828601611029565b9150509250929050565b60006020828403121561111157600080fd5b600061111f8482850161107f565b91505092915050565b6000806040838503121561113b57600080fd5b60006111498582860161107f565b925050602061115a85828601611015565b9150509250929050565b61116d816115ec565b82525050565b61117c8161160c565b82525050565b61118b8161164e565b82525050565b600061119c826115e1565b8084526111b081602086016020860161166f565b6111b9816116a2565b602085010191505092915050565b60006111d2826115d6565b8084526111e681602086016020860161166f565b6111ef816116a2565b602085010191505092915050565b6000601582527f5469746c652063616e6e6f7420626520656d70747900000000000000000000006020830152604082019050919050565b6000602482527f4f6e6c792061756469746f722063616e20706572666f726d207468697320616360208301527f74696f6e000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601382527f576f726b20646f6573206e6f74206578697374000000000000000000000000006020830152604082019050919050565b6000601d82527f576f726b206973206e6f7420696e2070656e64696e67207374617475730000006020830152604082019050919050565b60006101208301600083015161131860008601826113d2565b50602083015161132b6020860182611164565b506040830151848203604086015261134382826111c7565b9150506060830151848203606086015261135d82826111c7565b9150506080830151848203608086015261137782826111c7565b91505060a083015161138c60a0860182611173565b5060c083015161139f60c08601826113d2565b5060e08301516113b260e08601826113d2565b506101008301516113c7610100860182611182565b508091505092915050565b6113db8161162e565b82525050565b60006020820190506113f66000830184611164565b92915050565b60006020820190506114116000830184611182565b92915050565b600060208201905081810360008301526114318184611191565b905092915050565b60006020820190508181036000830152611452816111fd565b9050919050565b6000602082019050818103600083015261147281611234565b9050919050565b6000602082019050818103600083015261149281611291565b9050919050565b600060208201905081810360008301526114b2816112c8565b9050919050565b600060208201905081810360008301526114d381846112ff565b905092915050565b6000610120820190506114f1600083018c6113d2565b6114fe602083018b611164565b8181036040830152611510818a6111c7565b9050818103606083015261152481896111c7565b9050818103608083015261153881886111c7565b905061154760a0830187611173565b61155460c08301866113d2565b61156160e08301856113d2565b61156f610100830184611182565b9a9950505050505050505050565b6000604051905081810181811067ffffffffffffffff821117156115a057600080fd5b8060405250919050565b600067ffffffffffffffff8211156115c157600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b600060038210151561162657fe5b819050919050565b6000819050919050565b60008115159050919050565b6000819050919050565b600061165982611618565b9050919050565b82818337600083830152505050565b60005b8381101561168d578082015181840152602081019050611672565b8381111561169c576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e26b1d5bb364c156ecb978127347d09e2a79a0fdf9d22307f96c75437df99e9c6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","019282601f10610f3157805160ff1916838001178555610f5f565b82800160010185558215610f5f579182015b82811115610f5e578251825591602001919060010190610f43565b5b509050610f6c9190610ff0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fb157805160ff1916838001178555610fdf565b82800160010185558215610fdf579182015b82811115610fde578251825591602001919060010190610fc3565b5b509050610fec9190610ff0565b5090565b61101291905b8082111561100e576000816000905550600101610ff6565b5090565b90565b60006110218235611638565b905092915050565b600082601f830112151561103c57600080fd5b813561104f61104a826115aa565b61157d565b9150808252602083016020830185838301111561106b57600080fd5b611076838284611660565b50505092915050565b600061108b8235611644565b905092915050565b600080604083850312156110a657600080fd5b600083013567ffffffffffffffff8111156110c057600080fd5b6110cc85828601611029565b925050602083013567ffffffffffffffff8111156110e957600080fd5b6110f585828601611029565b9150509250929050565b60006020828403121561111157600080fd5b600061111f8482850161107f565b91505092915050565b6000806040838503121561113b57600080fd5b60006111498582860161107f565b925050602061115a85828601611015565b9150509250929050565b61116d816115ec565b82525050565b61117c8161160c565b82525050565b61118b8161164e565b82525050565b600061119c826115e1565b8084526111b081602086016020860161166f565b6111b9816116a2565b602085010191505092915050565b60006111d2826115d6565b8084526111e681602086016020860161166f565b6111ef816116a2565b602085010191505092915050565b6000601582527f5469746c652063616e6e6f7420626520656d70747900000000000000000000006020830152604082019050919050565b6000602482527f4f6e6c792061756469746f722063616e20706572666f726d207468697320616360208301527f74696f6e000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601382527f576f726b20646f6573206e6f74206578697374000000000000000000000000006020830152604082019050919050565b6000601d82527f576f726b206973206e6f7420696e2070656e64696e67207374617475730000006020830152604082019050919050565b60006101208301600083015161131860008601826113d2565b50602083015161132b6020860182611164565b506040830151848203604086015261134382826111c7565b9150506060830151848203606086015261135d82826111c7565b9150506080830151848203608086015261137782826111c7565b91505060a083015161138c60a0860182611173565b5060c083015161139f60c08601826113d2565b5060e08301516113b260e08601826113d2565b506101008301516113c7610100860182611182565b508091505092915050565b6113db8161162e565b82525050565b60006020820190506113f66000830184611164565b92915050565b60006020820190506114116000830184611182565b92915050565b600060208201905081810360008301526114318184611191565b905092915050565b60006020820190508181036000830152611452816111fd565b9050919050565b6000602082019050818103600083015261147281611234565b9050919050565b6000602082019050818103600083015261149281611291565b9050919050565b600060208201905081810360008301526114b2816112c8565b9050919050565b600060208201905081810360008301526114d381846112ff565b905092915050565b6000610120820190506114f1600083018c6113d2565b6114fe602083018b611164565b8181036040830152611510818a6111c7565b9050818103606083015261152481896111c7565b9050818103608083015261153881886111c7565b905061154760a0830187611173565b61155460c08301866113d2565b61156160e08301856113d2565b61156f610100830184611182565b9a9950505050505050505050565b6000604051905081810181811067ffffffffffffffff821117156115a057600080fd5b8060405250919050565b600067ffffffffffffffff8211156115c157600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b600060038210151561162657fe5b819050919050565b6000819050919050565b60008115159050919050565b6000819050919050565b600061165982611618565b9050919050565b82818337600083830152505050565b60005b8381101561168d578082015181840152602081019050611672565b8381111561169c576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820b705b7a3dc4ecaaa918611e7cb91d4e4b74243328a57e53bafec56be3ada29cc6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_workId\",\"type\":\"uint256\"},{\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"reviewWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_workId\",\"type\":\"uint256\"}],\"name\":\"getWork\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"copyrightNumber\",\"type\":\"string\"},{\"name\":\"copyrightApplied\",\"type\":\"bool\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"registerWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"works\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"copyrightNumber\",\"type\":\"string\"},{\"name\":\"copyrightApplied\",\"type\":\"bool\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"title\",\"type\":\"string\"}],\"name\":\"WorkRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"WorkStatusUpdated\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_AUDITOR = "auditor";

    public static final String FUNC_REVIEWWORK = "reviewWork";

    public static final String FUNC_GETWORK = "getWork";

    public static final String FUNC_REGISTERWORK = "registerWork";

    public static final String FUNC_WORKS = "works";

    public static final Event WORKREGISTERED_EVENT = new Event("WorkRegistered",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event WORKSTATUSUPDATED_EVENT = new Event("WorkStatusUpdated",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>() {}));
    ;

    protected CopyrightRegistry(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String auditor() throws ContractException {
        final Function function = new Function(FUNC_AUDITOR,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt reviewWork(BigInteger _workId, Boolean _approve ,String _copyright) throws ContractException {
        final Function function = new Function(
                FUNC_REVIEWWORK,
                Arrays.<Type>asList(new Uint256(_workId),
                        new Bool(_approve),
                        new Utf8String(_copyright)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] reviewWork(BigInteger _workId, Boolean _approve, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REVIEWWORK,
                Arrays.<Type>asList(new Uint256(_workId),
                new Bool(_approve)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReviewWork(BigInteger _workId, Boolean _approve) {
        final Function function = new Function(
                FUNC_REVIEWWORK,
                Arrays.<Type>asList(new Uint256(_workId),
                new Bool(_approve)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Boolean> getReviewWorkInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REVIEWWORK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue()
                );
    }

    public Struct0 getWork(BigInteger _workId) throws ContractException {
        final Function function = new Function(FUNC_GETWORK,
                Arrays.<Type>asList(new Uint256(_workId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public TransactionReceipt registerWork(String _title, String _description) {
        final Function function = new Function(
                FUNC_REGISTERWORK,
                Arrays.<Type>asList(new Utf8String(_title),
                new Utf8String(_description)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] registerWork(String _title, String _description, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERWORK,
                Arrays.<Type>asList(new Utf8String(_title),
                new Utf8String(_description)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegisterWork(String _title, String _description) {
        final Function function = new Function(
                FUNC_REGISTERWORK,
                Arrays.<Type>asList(new Utf8String(_title),
                new Utf8String(_description)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRegisterWorkInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERWORK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public Tuple9<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger> works(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_WORKS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple9<BigInteger, String, String, String, String, Boolean, BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (Boolean) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue(),
                (BigInteger) results.get(7).getValue(),
                (BigInteger) results.get(8).getValue());
    }

    public List<WorkRegisteredEventResponse> getWorkRegisteredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WORKREGISTERED_EVENT, transactionReceipt);
        ArrayList<WorkRegisteredEventResponse> responses = new ArrayList<WorkRegisteredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WorkRegisteredEventResponse typedResponse = new WorkRegisteredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.title = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeWorkRegisteredEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeWorkRegisteredEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKREGISTERED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<WorkStatusUpdatedEventResponse> getWorkStatusUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(WORKSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<WorkStatusUpdatedEventResponse> responses = new ArrayList<WorkStatusUpdatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WorkStatusUpdatedEventResponse typedResponse = new WorkStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeWorkStatusUpdatedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKSTATUSUPDATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeWorkStatusUpdatedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(WORKSTATUSUPDATED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static CopyrightRegistry load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CopyrightRegistry(contractAddress, client, credential);
    }

    public static CopyrightRegistry deploy(Client client, CryptoKeyPair credential, String _auditor) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_auditor)));
        return deploy(CopyrightRegistry.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class Struct0 extends DynamicStruct {
        public BigInteger id;

        public String creator;

        public String title;

        public String description;

        public String copyrightNumber;

        public Boolean copyrightApplied;

        public BigInteger createdAt;

        public BigInteger updatedAt;

        public BigInteger status;

        public Struct0(Uint256 id, Address creator, Utf8String title, Utf8String description, Utf8String copyrightNumber, Bool copyrightApplied, Uint256 createdAt, Uint256 updatedAt, Uint8 status) {
            super(id,creator,title,description,copyrightNumber,copyrightApplied,createdAt,updatedAt,status);
            this.id = id.getValue();
            this.creator = creator.getValue();
            this.title = title.getValue();
            this.description = description.getValue();
            this.copyrightNumber = copyrightNumber.getValue();
            this.copyrightApplied = copyrightApplied.getValue();
            this.createdAt = createdAt.getValue();
            this.updatedAt = updatedAt.getValue();
            this.status = status.getValue();
        }

        public Struct0(BigInteger id, String creator, String title, String description, String copyrightNumber, Boolean copyrightApplied, BigInteger createdAt, BigInteger updatedAt, BigInteger status) {
            super(new Uint256(id),new Address(creator),new Utf8String(title),new Utf8String(description),new Utf8String(copyrightNumber),new Bool(copyrightApplied),new Uint256(createdAt),new Uint256(updatedAt),new Uint8(status));
            this.id = id;
            this.creator = creator;
            this.title = title;
            this.description = description;
            this.copyrightNumber = copyrightNumber;
            this.copyrightApplied = copyrightApplied;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.status = status;
        }
    }

    public static class WorkRegisteredEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String creator;

        public String title;
    }

    public static class WorkStatusUpdatedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public BigInteger status;
    }
}
